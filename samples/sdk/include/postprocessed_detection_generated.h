// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSTPROCESSEDDETECTION_POSTPROCESSED_H_
#define FLATBUFFERS_GENERATED_POSTPROCESSEDDETECTION_POSTPROCESSED_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace postprocessed {

struct Bbox;

struct DetectionAnn;

struct Detection;
struct DetectionBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Bbox FLATBUFFERS_FINAL_CLASS {
 private:
  float x_min_;
  float x_max_;
  float y_min_;
  float y_max_;

 public:
  Bbox()
      : x_min_(0),
        x_max_(0),
        y_min_(0),
        y_max_(0) {
  }
  Bbox(float _x_min, float _x_max, float _y_min, float _y_max)
      : x_min_(::flatbuffers::EndianScalar(_x_min)),
        x_max_(::flatbuffers::EndianScalar(_x_max)),
        y_min_(::flatbuffers::EndianScalar(_y_min)),
        y_max_(::flatbuffers::EndianScalar(_y_max)) {
  }
  float x_min() const {
    return ::flatbuffers::EndianScalar(x_min_);
  }
  float x_max() const {
    return ::flatbuffers::EndianScalar(x_max_);
  }
  float y_min() const {
    return ::flatbuffers::EndianScalar(y_min_);
  }
  float y_max() const {
    return ::flatbuffers::EndianScalar(y_max_);
  }
};
FLATBUFFERS_STRUCT_END(Bbox, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) DetectionAnn FLATBUFFERS_FINAL_CLASS {
 private:
  postprocessed::Bbox bbox_;
  float prob_;
  float category_;

 public:
  DetectionAnn()
      : bbox_(),
        prob_(0),
        category_(0) {
  }
  DetectionAnn(const postprocessed::Bbox &_bbox, float _prob, float _category)
      : bbox_(_bbox),
        prob_(::flatbuffers::EndianScalar(_prob)),
        category_(::flatbuffers::EndianScalar(_category)) {
  }
  const postprocessed::Bbox &bbox() const {
    return bbox_;
  }
  float prob() const {
    return ::flatbuffers::EndianScalar(prob_);
  }
  float category() const {
    return ::flatbuffers::EndianScalar(category_);
  }
};
FLATBUFFERS_STRUCT_END(DetectionAnn, 24);

struct Detection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DetectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANNOTATIONS = 4
  };
  const ::flatbuffers::Vector<const postprocessed::DetectionAnn *> *annotations() const {
    return GetPointer<const ::flatbuffers::Vector<const postprocessed::DetectionAnn *> *>(VT_ANNOTATIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ANNOTATIONS) &&
           verifier.VerifyVector(annotations()) &&
           verifier.EndTable();
  }
};

struct DetectionBuilder {
  typedef Detection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_annotations(::flatbuffers::Offset<::flatbuffers::Vector<const postprocessed::DetectionAnn *>> annotations) {
    fbb_.AddOffset(Detection::VT_ANNOTATIONS, annotations);
  }
  explicit DetectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Detection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Detection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Detection> CreateDetection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const postprocessed::DetectionAnn *>> annotations = 0) {
  DetectionBuilder builder_(_fbb);
  builder_.add_annotations(annotations);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Detection> CreateDetectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<postprocessed::DetectionAnn> *annotations = nullptr) {
  auto annotations__ = annotations ? _fbb.CreateVectorOfStructs<postprocessed::DetectionAnn>(*annotations) : 0;
  return postprocessed::CreateDetection(
      _fbb,
      annotations__);
}

inline const postprocessed::Detection *GetDetection(const void *buf) {
  return ::flatbuffers::GetRoot<postprocessed::Detection>(buf);
}

inline const postprocessed::Detection *GetSizePrefixedDetection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<postprocessed::Detection>(buf);
}

inline bool VerifyDetectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<postprocessed::Detection>(nullptr);
}

inline bool VerifySizePrefixedDetectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<postprocessed::Detection>(nullptr);
}

inline void FinishDetectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<postprocessed::Detection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDetectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<postprocessed::Detection> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace postprocessed

#endif  // FLATBUFFERS_GENERATED_POSTPROCESSEDDETECTION_POSTPROCESSED_H_
