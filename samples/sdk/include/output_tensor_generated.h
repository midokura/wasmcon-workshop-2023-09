// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OUTPUTTENSOR_OUTPUT_TENSOR_H_
#define FLATBUFFERS_GENERATED_OUTPUTTENSOR_OUTPUT_TENSOR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace output_tensor {

struct OutputTensor;
struct OutputTensorBuilder;

struct OutputTensor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OutputTensorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::Vector<float> *data() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct OutputTensorBuilder {
  typedef OutputTensor Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<float>> data) {
    fbb_.AddOffset(OutputTensor::VT_DATA, data);
  }
  explicit OutputTensorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OutputTensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OutputTensor>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OutputTensor> CreateOutputTensor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> data = 0) {
  OutputTensorBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OutputTensor> CreateOutputTensorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<float>(*data) : 0;
  return output_tensor::CreateOutputTensor(
      _fbb,
      data__);
}

inline const output_tensor::OutputTensor *GetOutputTensor(const void *buf) {
  return ::flatbuffers::GetRoot<output_tensor::OutputTensor>(buf);
}

inline const output_tensor::OutputTensor *GetSizePrefixedOutputTensor(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<output_tensor::OutputTensor>(buf);
}

inline bool VerifyOutputTensorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<output_tensor::OutputTensor>(nullptr);
}

inline bool VerifySizePrefixedOutputTensorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<output_tensor::OutputTensor>(nullptr);
}

inline void FinishOutputTensorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<output_tensor::OutputTensor> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOutputTensorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<output_tensor::OutputTensor> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace output_tensor

#endif  // FLATBUFFERS_GENERATED_OUTPUTTENSOR_OUTPUT_TENSOR_H_
